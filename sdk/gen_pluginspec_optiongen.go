// Code generated by optiongen. DO NOT EDIT.
// optiongen: github.com/timestee/optiongen

package sdk

import "github.com/sandwich-go/hotswap"

// PluginSpec should use NewPluginSpec to initialize it
type PluginSpec struct {
	MountDir    string        `usage:"磁盘挂载目录"`                   // annotation@MountDir(comment="磁盘挂载目录")
	HotReload   bool          `usage:"允许热更新，开启watch目录"`          // annotation@HotReload(comment="允许热更新，开启watch目录")
	DirsToKeep  int           `usage:"同一service, 磁盘保留发布的目录数"`    // annotation@DirsToKeep(comment="同一service, 磁盘保留发布的目录数")
	InternalDir string        `usage:"service pod内部携带的plugin目录"` // annotation@InternalDir(comment="service pod内部携带的plugin目录")
	OnLoadData  interface{}   `usage:"OnLoad的data参数"`            // annotation@OnLoadData(comment="OnLoad的data参数")
	HotswapSpec *hotswap.Spec // annotation@Spec(comment="hotswap参数")
}

// NewPluginSpec new PluginSpec
func NewPluginSpec(opts ...PluginSpecOption) *PluginSpec {
	cc := newDefaultPluginSpec()
	for _, opt := range opts {
		opt(cc)
	}
	if watchDogPluginSpec != nil {
		watchDogPluginSpec(cc)
	}
	return cc
}

// ApplyOption apply multiple new option and return the old ones
// sample:
// old := cc.ApplyOption(WithTimeout(time.Second))
// defer cc.ApplyOption(old...)
func (cc *PluginSpec) ApplyOption(opts ...PluginSpecOption) []PluginSpecOption {
	var previous []PluginSpecOption
	for _, opt := range opts {
		previous = append(previous, opt(cc))
	}
	return previous
}

// PluginSpecOption option func
type PluginSpecOption func(cc *PluginSpec) PluginSpecOption

// WithMountDir 磁盘挂载目录
func WithMountDir(v string) PluginSpecOption {
	return func(cc *PluginSpec) PluginSpecOption {
		previous := cc.MountDir
		cc.MountDir = v
		return WithMountDir(previous)
	}
}

// WithHotReload 允许热更新，开启watch目录
func WithHotReload(v bool) PluginSpecOption {
	return func(cc *PluginSpec) PluginSpecOption {
		previous := cc.HotReload
		cc.HotReload = v
		return WithHotReload(previous)
	}
}

// WithDirsToKeep 同一service, 磁盘保留发布的目录数
func WithDirsToKeep(v int) PluginSpecOption {
	return func(cc *PluginSpec) PluginSpecOption {
		previous := cc.DirsToKeep
		cc.DirsToKeep = v
		return WithDirsToKeep(previous)
	}
}

// WithInternalDir service pod内部携带的plugin目录
func WithInternalDir(v string) PluginSpecOption {
	return func(cc *PluginSpec) PluginSpecOption {
		previous := cc.InternalDir
		cc.InternalDir = v
		return WithInternalDir(previous)
	}
}

// WithOnLoadData OnLoad的data参数
func WithOnLoadData(v interface{}) PluginSpecOption {
	return func(cc *PluginSpec) PluginSpecOption {
		previous := cc.OnLoadData
		cc.OnLoadData = v
		return WithOnLoadData(previous)
	}
}

// WithHotswapSpec option func for filed HotswapSpec
func WithHotswapSpec(v *hotswap.Spec) PluginSpecOption {
	return func(cc *PluginSpec) PluginSpecOption {
		previous := cc.HotswapSpec
		cc.HotswapSpec = v
		return WithHotswapSpec(previous)
	}
}

// InstallPluginSpecWatchDog the installed func will called when NewPluginSpec  called
func InstallPluginSpecWatchDog(dog func(cc *PluginSpec)) { watchDogPluginSpec = dog }

// watchDogPluginSpec global watch dog
var watchDogPluginSpec func(cc *PluginSpec)

// newDefaultPluginSpec new default PluginSpec
func newDefaultPluginSpec() *PluginSpec {
	cc := &PluginSpec{}

	for _, opt := range [...]PluginSpecOption{
		WithMountDir("/mount/data"),
		WithHotReload(true),
		WithDirsToKeep(10),
		WithInternalDir("bin/plugin"),
		WithOnLoadData(nil),
		WithHotswapSpec(hotswap.NewSpec()),
	} {
		opt(cc)
	}

	return cc
}

// all getter func
func (cc *PluginSpec) GetMountDir() string           { return cc.MountDir }
func (cc *PluginSpec) GetHotReload() bool            { return cc.HotReload }
func (cc *PluginSpec) GetDirsToKeep() int            { return cc.DirsToKeep }
func (cc *PluginSpec) GetInternalDir() string        { return cc.InternalDir }
func (cc *PluginSpec) GetOnLoadData() interface{}    { return cc.OnLoadData }
func (cc *PluginSpec) GetHotswapSpec() *hotswap.Spec { return cc.HotswapSpec }

// PluginSpecVisitor visitor interface for PluginSpec
type PluginSpecVisitor interface {
	GetMountDir() string
	GetHotReload() bool
	GetDirsToKeep() int
	GetInternalDir() string
	GetOnLoadData() interface{}
	GetHotswapSpec() *hotswap.Spec
}

// PluginSpecInterface visitor + ApplyOption interface for PluginSpec
type PluginSpecInterface interface {
	PluginSpecVisitor
	ApplyOption(...PluginSpecOption) []PluginSpecOption
}

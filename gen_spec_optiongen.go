// Code generated by optiongen. DO NOT EDIT.
// optiongen: github.com/timestee/optiongen

package hotswap

import (
	"time"

	"github.com/edwingeng/slog"
)

// Spec should use NewSpec to initialize it
type Spec struct {
	Logger         slog.Logger              `usage:"replaces the default logger with your own."`                                  // annotation@Logger(comment="replaces the default logger with your own.")
	FreeDelay      time.Duration            `usage:"the delay time of calling OnFree. The default value is 5 minutes."`           // annotation@FreeDelay(comment="the delay time of calling OnFree. The default value is 5 minutes.")
	ReloadCallback ReloadCallback           `usage:"the callback function of reloading."`                                         // annotation@ReloadCallback(comment="the callback function of reloading.")
	ExtensionNewer func() interface{}       `usage:"the function used to create a new object for PluginManager.Vault.Extension."` // annotation@ExtensionNewer(comment="the function used to create a new object for PluginManager.Vault.Extension.")
	StaticPlugins  map[string]*StaticPlugin `usage:"the static plugins for static linking. 宿主程序直接编译的插件 用做debug和windows"`          // annotation@StaticPlugins(comment="the static plugins for static linking. 宿主程序直接编译的插件 用做debug和windows")
	Whitelist      []string                 `usage:"the plugins to load explicitly 若不为空 只加载白名单里的插件"`                              // annotation@Whitelist(comment="the plugins to load explicitly 若不为空 只加载白名单里的插件")
}

// NewSpec new Spec
func NewSpec(opts ...SpecOption) *Spec {
	cc := newDefaultSpec()
	for _, opt := range opts {
		opt(cc)
	}
	if watchDogSpec != nil {
		watchDogSpec(cc)
	}
	return cc
}

// ApplyOption apply multiple new option and return the old ones
// sample:
// old := cc.ApplyOption(WithTimeout(time.Second))
// defer cc.ApplyOption(old...)
func (cc *Spec) ApplyOption(opts ...SpecOption) []SpecOption {
	var previous []SpecOption
	for _, opt := range opts {
		previous = append(previous, opt(cc))
	}
	return previous
}

// SpecOption option func
type SpecOption func(cc *Spec) SpecOption

// WithLogger replaces the default logger with your own.
func WithLogger(v slog.Logger) SpecOption {
	return func(cc *Spec) SpecOption {
		previous := cc.Logger
		cc.Logger = v
		return WithLogger(previous)
	}
}

// WithFreeDelay the delay time of calling OnFree. The default value is 5 minutes.
func WithFreeDelay(v time.Duration) SpecOption {
	return func(cc *Spec) SpecOption {
		previous := cc.FreeDelay
		cc.FreeDelay = v
		return WithFreeDelay(previous)
	}
}

// WithReloadCallback the callback function of reloading.
func WithReloadCallback(v ReloadCallback) SpecOption {
	return func(cc *Spec) SpecOption {
		previous := cc.ReloadCallback
		cc.ReloadCallback = v
		return WithReloadCallback(previous)
	}
}

// WithExtensionNewer the function used to create a new object for PluginManager.Vault.Extension.
func WithExtensionNewer(v func() interface{}) SpecOption {
	return func(cc *Spec) SpecOption {
		previous := cc.ExtensionNewer
		cc.ExtensionNewer = v
		return WithExtensionNewer(previous)
	}
}

// WithStaticPlugins the static plugins for static linking. 宿主程序直接编译的插件 用做debug和windows
func WithStaticPlugins(v map[string]*StaticPlugin) SpecOption {
	return func(cc *Spec) SpecOption {
		previous := cc.StaticPlugins
		cc.StaticPlugins = v
		return WithStaticPlugins(previous)
	}
}

// WithWhitelist the plugins to load explicitly 若不为空 只加载白名单里的插件
func WithWhitelist(v ...string) SpecOption {
	return func(cc *Spec) SpecOption {
		previous := cc.Whitelist
		cc.Whitelist = v
		return WithWhitelist(previous...)
	}
}

// InstallSpecWatchDog the installed func will called when NewSpec  called
func InstallSpecWatchDog(dog func(cc *Spec)) { watchDogSpec = dog }

// watchDogSpec global watch dog
var watchDogSpec func(cc *Spec)

// newDefaultSpec new default Spec
func newDefaultSpec() *Spec {
	cc := &Spec{}

	for _, opt := range [...]SpecOption{
		WithLogger(slog.NewDevelopmentConfig().MustBuild()),
		WithFreeDelay(5 * time.Minute),
		WithReloadCallback(nil),
		WithExtensionNewer(nil),
		WithStaticPlugins(nil),
		WithWhitelist(nil...),
	} {
		opt(cc)
	}

	return cc
}

// all getter func
func (cc *Spec) GetLogger() slog.Logger                     { return cc.Logger }
func (cc *Spec) GetFreeDelay() time.Duration                { return cc.FreeDelay }
func (cc *Spec) GetReloadCallback() ReloadCallback          { return cc.ReloadCallback }
func (cc *Spec) GetExtensionNewer() func() interface{}      { return cc.ExtensionNewer }
func (cc *Spec) GetStaticPlugins() map[string]*StaticPlugin { return cc.StaticPlugins }
func (cc *Spec) GetWhitelist() []string                     { return cc.Whitelist }

// SpecVisitor visitor interface for Spec
type SpecVisitor interface {
	GetLogger() slog.Logger
	GetFreeDelay() time.Duration
	GetReloadCallback() ReloadCallback
	GetExtensionNewer() func() interface{}
	GetStaticPlugins() map[string]*StaticPlugin
	GetWhitelist() []string
}

// SpecInterface visitor + ApplyOption interface for Spec
type SpecInterface interface {
	SpecVisitor
	ApplyOption(...SpecOption) []SpecOption
}
